//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HRAndPayroll
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Designation_Master> Designation_Masters { get; set; }
        public DbSet<Employee_Master> Employee_Masters { get; set; }
        public DbSet<Salary_Formula> Salary_Formulas { get; set; }
        public DbSet<Salary_Master> Salary_Masters { get; set; }
        public DbSet<Salary_Sheet> Salary_Sheets { get; set; }
    
        public virtual int AddOrUpdateDesignation(Nullable<int> designationId, string designationName, Nullable<System.DateTime> dateTimeLastUpdated, Nullable<int> lastUpdateUserId)
        {
            var designationIdParameter = designationId.HasValue ?
                new ObjectParameter("DesignationId", designationId) :
                new ObjectParameter("DesignationId", typeof(int));
    
            var designationNameParameter = designationName != null ?
                new ObjectParameter("DesignationName", designationName) :
                new ObjectParameter("DesignationName", typeof(string));
    
            var dateTimeLastUpdatedParameter = dateTimeLastUpdated.HasValue ?
                new ObjectParameter("DateTimeLastUpdated", dateTimeLastUpdated) :
                new ObjectParameter("DateTimeLastUpdated", typeof(System.DateTime));
    
            var lastUpdateUserIdParameter = lastUpdateUserId.HasValue ?
                new ObjectParameter("LastUpdateUserId", lastUpdateUserId) :
                new ObjectParameter("LastUpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrUpdateDesignation", designationIdParameter, designationNameParameter, dateTimeLastUpdatedParameter, lastUpdateUserIdParameter);
        }
    
        public virtual int AddOrUpdateEmployee(Nullable<int> employeeId, string employeeCode, string firstName, string lastName, string password, string fatherName, string motherName, string gender, string maritalStatus, string address, string city, string state, string zipCode, Nullable<System.DateTime> dOJ, Nullable<System.DateTime> dOB, string mobileNo, string emergencyNo, string bloodGroup, string pANCardNo, string personalEmailId, string officialEmailId, string skypeId, Nullable<int> designationId, Nullable<int> reportToManager, Nullable<bool> isManager, Nullable<bool> isAdmin, Nullable<int> salaryAtJoining, Nullable<bool> status, Nullable<System.DateTime> dateTimeLastUpdated, Nullable<int> lastUpdateUserId, Nullable<System.DateTime> nextDueDate)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var motherNameParameter = motherName != null ?
                new ObjectParameter("MotherName", motherName) :
                new ObjectParameter("MotherName", typeof(string));
    
            var genderParameter = gender != null ?
                new ObjectParameter("Gender", gender) :
                new ObjectParameter("Gender", typeof(string));
    
            var maritalStatusParameter = maritalStatus != null ?
                new ObjectParameter("MaritalStatus", maritalStatus) :
                new ObjectParameter("MaritalStatus", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("Address", address) :
                new ObjectParameter("Address", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var zipCodeParameter = zipCode != null ?
                new ObjectParameter("ZipCode", zipCode) :
                new ObjectParameter("ZipCode", typeof(string));
    
            var dOJParameter = dOJ.HasValue ?
                new ObjectParameter("DOJ", dOJ) :
                new ObjectParameter("DOJ", typeof(System.DateTime));
    
            var dOBParameter = dOB.HasValue ?
                new ObjectParameter("DOB", dOB) :
                new ObjectParameter("DOB", typeof(System.DateTime));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var emergencyNoParameter = emergencyNo != null ?
                new ObjectParameter("EmergencyNo", emergencyNo) :
                new ObjectParameter("EmergencyNo", typeof(string));
    
            var bloodGroupParameter = bloodGroup != null ?
                new ObjectParameter("BloodGroup", bloodGroup) :
                new ObjectParameter("BloodGroup", typeof(string));
    
            var pANCardNoParameter = pANCardNo != null ?
                new ObjectParameter("PANCardNo", pANCardNo) :
                new ObjectParameter("PANCardNo", typeof(string));
    
            var personalEmailIdParameter = personalEmailId != null ?
                new ObjectParameter("PersonalEmailId", personalEmailId) :
                new ObjectParameter("PersonalEmailId", typeof(string));
    
            var officialEmailIdParameter = officialEmailId != null ?
                new ObjectParameter("OfficialEmailId", officialEmailId) :
                new ObjectParameter("OfficialEmailId", typeof(string));
    
            var skypeIdParameter = skypeId != null ?
                new ObjectParameter("SkypeId", skypeId) :
                new ObjectParameter("SkypeId", typeof(string));
    
            var designationIdParameter = designationId.HasValue ?
                new ObjectParameter("DesignationId", designationId) :
                new ObjectParameter("DesignationId", typeof(int));
    
            var reportToManagerParameter = reportToManager.HasValue ?
                new ObjectParameter("ReportToManager", reportToManager) :
                new ObjectParameter("ReportToManager", typeof(int));
    
            var isManagerParameter = isManager.HasValue ?
                new ObjectParameter("IsManager", isManager) :
                new ObjectParameter("IsManager", typeof(bool));
    
            var isAdminParameter = isAdmin.HasValue ?
                new ObjectParameter("IsAdmin", isAdmin) :
                new ObjectParameter("IsAdmin", typeof(bool));
    
            var salaryAtJoiningParameter = salaryAtJoining.HasValue ?
                new ObjectParameter("SalaryAtJoining", salaryAtJoining) :
                new ObjectParameter("SalaryAtJoining", typeof(int));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var dateTimeLastUpdatedParameter = dateTimeLastUpdated.HasValue ?
                new ObjectParameter("DateTimeLastUpdated", dateTimeLastUpdated) :
                new ObjectParameter("DateTimeLastUpdated", typeof(System.DateTime));
    
            var lastUpdateUserIdParameter = lastUpdateUserId.HasValue ?
                new ObjectParameter("LastUpdateUserId", lastUpdateUserId) :
                new ObjectParameter("LastUpdateUserId", typeof(int));
    
            var nextDueDateParameter = nextDueDate.HasValue ?
                new ObjectParameter("NextDueDate", nextDueDate) :
                new ObjectParameter("NextDueDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrUpdateEmployee", employeeIdParameter, employeeCodeParameter, firstNameParameter, lastNameParameter, passwordParameter, fatherNameParameter, motherNameParameter, genderParameter, maritalStatusParameter, addressParameter, cityParameter, stateParameter, zipCodeParameter, dOJParameter, dOBParameter, mobileNoParameter, emergencyNoParameter, bloodGroupParameter, pANCardNoParameter, personalEmailIdParameter, officialEmailIdParameter, skypeIdParameter, designationIdParameter, reportToManagerParameter, isManagerParameter, isAdminParameter, salaryAtJoiningParameter, statusParameter, dateTimeLastUpdatedParameter, lastUpdateUserIdParameter, nextDueDateParameter);
        }
    
        public virtual int AddOrUpdateSalary(Nullable<int> entryId, Nullable<System.DateTime> entryDate, Nullable<int> employeeId, Nullable<System.DateTime> startDate, Nullable<int> salaryAmount, Nullable<System.DateTime> nextDueDate, string remarks, Nullable<System.DateTime> dateTimeLastUpdated, Nullable<int> lastUpdateUserId)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(int));
    
            var entryDateParameter = entryDate.HasValue ?
                new ObjectParameter("EntryDate", entryDate) :
                new ObjectParameter("EntryDate", typeof(System.DateTime));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var salaryAmountParameter = salaryAmount.HasValue ?
                new ObjectParameter("SalaryAmount", salaryAmount) :
                new ObjectParameter("SalaryAmount", typeof(int));
    
            var nextDueDateParameter = nextDueDate.HasValue ?
                new ObjectParameter("NextDueDate", nextDueDate) :
                new ObjectParameter("NextDueDate", typeof(System.DateTime));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var dateTimeLastUpdatedParameter = dateTimeLastUpdated.HasValue ?
                new ObjectParameter("DateTimeLastUpdated", dateTimeLastUpdated) :
                new ObjectParameter("DateTimeLastUpdated", typeof(System.DateTime));
    
            var lastUpdateUserIdParameter = lastUpdateUserId.HasValue ?
                new ObjectParameter("LastUpdateUserId", lastUpdateUserId) :
                new ObjectParameter("LastUpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrUpdateSalary", entryIdParameter, entryDateParameter, employeeIdParameter, startDateParameter, salaryAmountParameter, nextDueDateParameter, remarksParameter, dateTimeLastUpdatedParameter, lastUpdateUserIdParameter);
        }
    
        public virtual int AddOrUpdateSalaryFormulas(Nullable<int> entryId, Nullable<System.DateTime> startDate, string basic, string hRA, string conveyanceAllowance, string medicalAllowance, string otherAllowance, string ePFLimit, string ePFEmployeeShare, string ePFEmployerShare, string ePFApplicableOn, string eSILimit, string eSIEmployeeShare, string eSIEmployerShare, string eSIApplicableOn, Nullable<System.DateTime> dateTimeLastUpdated, Nullable<int> lastUpdateUserId)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var basicParameter = basic != null ?
                new ObjectParameter("Basic", basic) :
                new ObjectParameter("Basic", typeof(string));
    
            var hRAParameter = hRA != null ?
                new ObjectParameter("HRA", hRA) :
                new ObjectParameter("HRA", typeof(string));
    
            var conveyanceAllowanceParameter = conveyanceAllowance != null ?
                new ObjectParameter("ConveyanceAllowance", conveyanceAllowance) :
                new ObjectParameter("ConveyanceAllowance", typeof(string));
    
            var medicalAllowanceParameter = medicalAllowance != null ?
                new ObjectParameter("MedicalAllowance", medicalAllowance) :
                new ObjectParameter("MedicalAllowance", typeof(string));
    
            var otherAllowanceParameter = otherAllowance != null ?
                new ObjectParameter("OtherAllowance", otherAllowance) :
                new ObjectParameter("OtherAllowance", typeof(string));
    
            var ePFLimitParameter = ePFLimit != null ?
                new ObjectParameter("EPFLimit", ePFLimit) :
                new ObjectParameter("EPFLimit", typeof(string));
    
            var ePFEmployeeShareParameter = ePFEmployeeShare != null ?
                new ObjectParameter("EPFEmployeeShare", ePFEmployeeShare) :
                new ObjectParameter("EPFEmployeeShare", typeof(string));
    
            var ePFEmployerShareParameter = ePFEmployerShare != null ?
                new ObjectParameter("EPFEmployerShare", ePFEmployerShare) :
                new ObjectParameter("EPFEmployerShare", typeof(string));
    
            var ePFApplicableOnParameter = ePFApplicableOn != null ?
                new ObjectParameter("EPFApplicableOn", ePFApplicableOn) :
                new ObjectParameter("EPFApplicableOn", typeof(string));
    
            var eSILimitParameter = eSILimit != null ?
                new ObjectParameter("ESILimit", eSILimit) :
                new ObjectParameter("ESILimit", typeof(string));
    
            var eSIEmployeeShareParameter = eSIEmployeeShare != null ?
                new ObjectParameter("ESIEmployeeShare", eSIEmployeeShare) :
                new ObjectParameter("ESIEmployeeShare", typeof(string));
    
            var eSIEmployerShareParameter = eSIEmployerShare != null ?
                new ObjectParameter("ESIEmployerShare", eSIEmployerShare) :
                new ObjectParameter("ESIEmployerShare", typeof(string));
    
            var eSIApplicableOnParameter = eSIApplicableOn != null ?
                new ObjectParameter("ESIApplicableOn", eSIApplicableOn) :
                new ObjectParameter("ESIApplicableOn", typeof(string));
    
            var dateTimeLastUpdatedParameter = dateTimeLastUpdated.HasValue ?
                new ObjectParameter("DateTimeLastUpdated", dateTimeLastUpdated) :
                new ObjectParameter("DateTimeLastUpdated", typeof(System.DateTime));
    
            var lastUpdateUserIdParameter = lastUpdateUserId.HasValue ?
                new ObjectParameter("LastUpdateUserId", lastUpdateUserId) :
                new ObjectParameter("LastUpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrUpdateSalaryFormulas", entryIdParameter, startDateParameter, basicParameter, hRAParameter, conveyanceAllowanceParameter, medicalAllowanceParameter, otherAllowanceParameter, ePFLimitParameter, ePFEmployeeShareParameter, ePFEmployerShareParameter, ePFApplicableOnParameter, eSILimitParameter, eSIEmployeeShareParameter, eSIEmployerShareParameter, eSIApplicableOnParameter, dateTimeLastUpdatedParameter, lastUpdateUserIdParameter);
        }
    
        public virtual int AddOrUpdateSalarySheet(Nullable<int> entryId, Nullable<int> salaryMonth, Nullable<int> salaryYear, Nullable<int> employeeId, Nullable<int> grossSalary, Nullable<double> daysPayable, Nullable<double> eSIEmployeeShare, Nullable<double> eSIEmployerShare, Nullable<double> ePFEmployeeShare, Nullable<double> ePFEmployerShare, Nullable<double> tDS, Nullable<double> incentive, Nullable<double> netPayable, Nullable<System.DateTime> dateTimeLastUpdated, Nullable<int> lastUpdateUserId)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(int));
    
            var salaryMonthParameter = salaryMonth.HasValue ?
                new ObjectParameter("SalaryMonth", salaryMonth) :
                new ObjectParameter("SalaryMonth", typeof(int));
    
            var salaryYearParameter = salaryYear.HasValue ?
                new ObjectParameter("SalaryYear", salaryYear) :
                new ObjectParameter("SalaryYear", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var grossSalaryParameter = grossSalary.HasValue ?
                new ObjectParameter("GrossSalary", grossSalary) :
                new ObjectParameter("GrossSalary", typeof(int));
    
            var daysPayableParameter = daysPayable.HasValue ?
                new ObjectParameter("DaysPayable", daysPayable) :
                new ObjectParameter("DaysPayable", typeof(double));
    
            var eSIEmployeeShareParameter = eSIEmployeeShare.HasValue ?
                new ObjectParameter("ESIEmployeeShare", eSIEmployeeShare) :
                new ObjectParameter("ESIEmployeeShare", typeof(double));
    
            var eSIEmployerShareParameter = eSIEmployerShare.HasValue ?
                new ObjectParameter("ESIEmployerShare", eSIEmployerShare) :
                new ObjectParameter("ESIEmployerShare", typeof(double));
    
            var ePFEmployeeShareParameter = ePFEmployeeShare.HasValue ?
                new ObjectParameter("EPFEmployeeShare", ePFEmployeeShare) :
                new ObjectParameter("EPFEmployeeShare", typeof(double));
    
            var ePFEmployerShareParameter = ePFEmployerShare.HasValue ?
                new ObjectParameter("EPFEmployerShare", ePFEmployerShare) :
                new ObjectParameter("EPFEmployerShare", typeof(double));
    
            var tDSParameter = tDS.HasValue ?
                new ObjectParameter("TDS", tDS) :
                new ObjectParameter("TDS", typeof(double));
    
            var incentiveParameter = incentive.HasValue ?
                new ObjectParameter("Incentive", incentive) :
                new ObjectParameter("Incentive", typeof(double));
    
            var netPayableParameter = netPayable.HasValue ?
                new ObjectParameter("NetPayable", netPayable) :
                new ObjectParameter("NetPayable", typeof(double));
    
            var dateTimeLastUpdatedParameter = dateTimeLastUpdated.HasValue ?
                new ObjectParameter("DateTimeLastUpdated", dateTimeLastUpdated) :
                new ObjectParameter("DateTimeLastUpdated", typeof(System.DateTime));
    
            var lastUpdateUserIdParameter = lastUpdateUserId.HasValue ?
                new ObjectParameter("LastUpdateUserId", lastUpdateUserId) :
                new ObjectParameter("LastUpdateUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddOrUpdateSalarySheet", entryIdParameter, salaryMonthParameter, salaryYearParameter, employeeIdParameter, grossSalaryParameter, daysPayableParameter, eSIEmployeeShareParameter, eSIEmployerShareParameter, ePFEmployeeShareParameter, ePFEmployerShareParameter, tDSParameter, incentiveParameter, netPayableParameter, dateTimeLastUpdatedParameter, lastUpdateUserIdParameter);
        }
    
        public virtual ObjectResult<CheckSalarySheet_Result> CheckSalarySheet(Nullable<int> salaryMonth, Nullable<int> salaryYear)
        {
            var salaryMonthParameter = salaryMonth.HasValue ?
                new ObjectParameter("SalaryMonth", salaryMonth) :
                new ObjectParameter("SalaryMonth", typeof(int));
    
            var salaryYearParameter = salaryYear.HasValue ?
                new ObjectParameter("SalaryYear", salaryYear) :
                new ObjectParameter("SalaryYear", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckSalarySheet_Result>("CheckSalarySheet", salaryMonthParameter, salaryYearParameter);
        }
    
        public virtual int CheckUser(string employeeCode, string password)
        {
            var employeeCodeParameter = employeeCode != null ?
                new ObjectParameter("EmployeeCode", employeeCode) :
                new ObjectParameter("EmployeeCode", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckUser", employeeCodeParameter, passwordParameter);
        }
    
        public virtual int DeactivateEmployee(string empCode, Nullable<bool> status)
        {
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeactivateEmployee", empCodeParameter, statusParameter);
        }
    
        public virtual int DeleteDesignation(Nullable<int> designationId)
        {
            var designationIdParameter = designationId.HasValue ?
                new ObjectParameter("DesignationId", designationId) :
                new ObjectParameter("DesignationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDesignation", designationIdParameter);
        }
    
        public virtual int DeleteEmployee(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmployee", employeeIdParameter);
        }
    
        public virtual int DeleteSalary(Nullable<int> entryId)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalary", entryIdParameter);
        }
    
        public virtual int DeleteSalaryFormulas(Nullable<int> entryId)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalaryFormulas", entryIdParameter);
        }
    
        public virtual int DeleteSalarySheet(Nullable<int> entryId)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteSalarySheet", entryIdParameter);
        }
    
        public virtual ObjectResult<GetDesignationDetail_Result> GetDesignationDetail(Nullable<int> designationId)
        {
            var designationIdParameter = designationId.HasValue ?
                new ObjectParameter("DesignationId", designationId) :
                new ObjectParameter("DesignationId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDesignationDetail_Result>("GetDesignationDetail", designationIdParameter);
        }
    
        public virtual ObjectResult<GetDesignationList_Result> GetDesignationList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDesignationList_Result>("GetDesignationList");
        }
    
        public virtual int GetEmployee(string empId)
        {
            var empIdParameter = empId != null ?
                new ObjectParameter("EmpId", empId) :
                new ObjectParameter("EmpId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEmployee", empIdParameter);
        }
    
        public virtual ObjectResult<GetEmployeeDetail_Result> GetEmployeeDetail(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeDetail_Result>("GetEmployeeDetail", employeeIdParameter);
        }
    
        public virtual ObjectResult<GetEmployeeList_Result> GetEmployeeList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEmployeeList_Result>("GetEmployeeList");
        }
    
        public virtual ObjectResult<GetManagerList_Result> GetManagerList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetManagerList_Result>("GetManagerList");
        }
    
        public virtual int GetMiniEmployeeDetail(string empCode, string employeeId, string managerEmployeeId, string designationId, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<bool> status)
        {
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var employeeIdParameter = employeeId != null ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(string));
    
            var managerEmployeeIdParameter = managerEmployeeId != null ?
                new ObjectParameter("ManagerEmployeeId", managerEmployeeId) :
                new ObjectParameter("ManagerEmployeeId", typeof(string));
    
            var designationIdParameter = designationId != null ?
                new ObjectParameter("DesignationId", designationId) :
                new ObjectParameter("DesignationId", typeof(string));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetMiniEmployeeDetail", empCodeParameter, employeeIdParameter, managerEmployeeIdParameter, designationIdParameter, fromDateParameter, toDateParameter, statusParameter);
        }
    
        public virtual ObjectResult<GetSalaryDetail_Result> GetSalaryDetail(Nullable<int> entryId)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalaryDetail_Result>("GetSalaryDetail", entryIdParameter);
        }
    
        public virtual ObjectResult<GetSalaryFormulasDetail_Result> GetSalaryFormulasDetail(Nullable<int> entryId)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalaryFormulasDetail_Result>("GetSalaryFormulasDetail", entryIdParameter);
        }
    
        public virtual int GetSalaryFormulasList(Nullable<System.DateTime> startDate, string basic, string hRA, string conveyanceAllowance, string medicalAllowance)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var basicParameter = basic != null ?
                new ObjectParameter("Basic", basic) :
                new ObjectParameter("Basic", typeof(string));
    
            var hRAParameter = hRA != null ?
                new ObjectParameter("HRA", hRA) :
                new ObjectParameter("HRA", typeof(string));
    
            var conveyanceAllowanceParameter = conveyanceAllowance != null ?
                new ObjectParameter("ConveyanceAllowance", conveyanceAllowance) :
                new ObjectParameter("ConveyanceAllowance", typeof(string));
    
            var medicalAllowanceParameter = medicalAllowance != null ?
                new ObjectParameter("MedicalAllowance", medicalAllowance) :
                new ObjectParameter("MedicalAllowance", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSalaryFormulasList", startDateParameter, basicParameter, hRAParameter, conveyanceAllowanceParameter, medicalAllowanceParameter);
        }
    
        public virtual ObjectResult<GetSalaryList_Result> GetSalaryList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalaryList_Result>("GetSalaryList");
        }
    
        public virtual int GetSalarySearchList(Nullable<System.DateTime> startDate, string empName, string salaryAmt, Nullable<System.DateTime> nextDueDate)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var empNameParameter = empName != null ?
                new ObjectParameter("EmpName", empName) :
                new ObjectParameter("EmpName", typeof(string));
    
            var salaryAmtParameter = salaryAmt != null ?
                new ObjectParameter("SalaryAmt", salaryAmt) :
                new ObjectParameter("SalaryAmt", typeof(string));
    
            var nextDueDateParameter = nextDueDate.HasValue ?
                new ObjectParameter("nextDueDate", nextDueDate) :
                new ObjectParameter("nextDueDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetSalarySearchList", startDateParameter, empNameParameter, salaryAmtParameter, nextDueDateParameter);
        }
    
        public virtual ObjectResult<GetSalarySheetDetail_Result> GetSalarySheetDetail(Nullable<int> entryId)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalarySheetDetail_Result>("GetSalarySheetDetail", entryIdParameter);
        }
    
        public virtual ObjectResult<GetSalarySheetList_Result> GetSalarySheetList(Nullable<int> salaryYear, Nullable<int> salaryMonth)
        {
            var salaryYearParameter = salaryYear.HasValue ?
                new ObjectParameter("SalaryYear", salaryYear) :
                new ObjectParameter("SalaryYear", typeof(int));
    
            var salaryMonthParameter = salaryMonth.HasValue ?
                new ObjectParameter("SalaryMonth", salaryMonth) :
                new ObjectParameter("SalaryMonth", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalarySheetList_Result>("GetSalarySheetList", salaryYearParameter, salaryMonthParameter);
        }
    
        public virtual ObjectResult<GetSalarySheetReport_Result> GetSalarySheetReport(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSalarySheetReport_Result>("GetSalarySheetReport", employeeIdParameter);
        }
    
        public virtual ObjectResult<GetUserInfo_Result> GetUserInfo(string empCode)
        {
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserInfo_Result>("GetUserInfo", empCodeParameter);
        }
    
        public virtual ObjectResult<SalaryReport_Result> SalaryReport(Nullable<int> salaryYear, Nullable<int> salaryMonth)
        {
            var salaryYearParameter = salaryYear.HasValue ?
                new ObjectParameter("SalaryYear", salaryYear) :
                new ObjectParameter("SalaryYear", typeof(int));
    
            var salaryMonthParameter = salaryMonth.HasValue ?
                new ObjectParameter("SalaryMonth", salaryMonth) :
                new ObjectParameter("SalaryMonth", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SalaryReport_Result>("SalaryReport", salaryYearParameter, salaryMonthParameter);
        }
    
        public virtual ObjectResult<spSalarySheet_Result> spSalarySheet()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spSalarySheet_Result>("spSalarySheet");
        }
    
        public virtual int UpdateDatePaid(Nullable<int> entryId, Nullable<int> employeeId, Nullable<System.DateTime> datePaid)
        {
            var entryIdParameter = entryId.HasValue ?
                new ObjectParameter("EntryId", entryId) :
                new ObjectParameter("EntryId", typeof(int));
    
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var datePaidParameter = datePaid.HasValue ?
                new ObjectParameter("DatePaid", datePaid) :
                new ObjectParameter("DatePaid", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDatePaid", entryIdParameter, employeeIdParameter, datePaidParameter);
        }
    }
}
